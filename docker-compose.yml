services:
  alembic:
    container_name: alembic
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: alembic.Dockerfile
    command:
      /bin/sh -c "alembic revision --autogenerate -m "initial" &&
      alembic upgrade head && python initializations.py"
    volumes:
      - ./backend/alembic/db_migrations/versions:/alembic/db_migrations/versions
    networks:
      - default

  authorization:
    container_name: authorization
    depends_on:
      alembic:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: auth.Dockerfile
    ports:
      - "8000:8000"
    command:
       python3 authorization/main.py
    env_file:
      - backend/authorization/.env_prod
    volumes:
      - ./backend/authorization/media:/backend/authorization/media
    networks:
      - default
#  main:
#    container_name: main
#    depends_on:
#      alembic:
#        condition: service_completed_successfully
#      postgres:
#        condition: service_healthy
#    build:
#      context: ./backend
#      dockerfile: backend/main.Dockerfile
#    ports:
#      - "8001:8001"
#    command:
#       python3 main/main.py
#    env_file:
#      - backend/main/.env_prod
#    volumes:
#      - ./backend/main/media:/backend/main/media
#    networks:
#      - default
  postgres:
    build:
      context: ./postgres
      dockerfile: postgres.Dockerfile
    container_name: postgres
    env_file:
      - postgres/.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 7s
      start_interval: 1s
    restart: always
    networks:
      - default
#  redis:
#    image: redis:7.2.4-alpine
#    container_name: redis
#    restart: always
#    ports:
#      - "6379:6379"
#    env_file:
#      - .env
#  celery:
#    container_name: celery
#    build: .
#    command:
#      celery -A main.useful things.tasks:celery worker --loglevel=INFO
#    depends_on:
#      - redis
#  flower:
#    container_name: flower
#    build: .
#    command:
#      celery -A main.useful things.tasks:celery flower
#    depends_on:
#      - celery
#    ports:
#      - "5555:5555"

volumes:
  pgdata:

networks:
  default:
    driver: bridge
    name: network
